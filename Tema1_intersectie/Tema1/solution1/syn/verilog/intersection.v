// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="intersection_intersection,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.588000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=5,HLS_SYN_LUT=83,HLS_VERSION=2021_1}" *)

module intersection (
        ap_clk,
        ap_rst,
        Stg,
        D,
        S,
        J,
        Regula,
        EW,
        NS
);

parameter    ap_ST_fsm_state1 = 2'd1;
parameter    ap_ST_fsm_state2 = 2'd2;

input   ap_clk;
input   ap_rst;
input   Stg;
input   D;
input   S;
input   J;
output  [31:0] Regula;
output   EW;
output   NS;

reg[31:0] Regula;

(* fsm_encoding = "none" *) reg   [1:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] or_ln26_fu_135_p2;
reg   [0:0] or_ln26_reg_238;
wire   [0:0] or_ln18_fu_207_p2;
reg   [0:0] or_ln18_reg_258;
reg   [0:0] empty_reg_100;
wire   [0:0] or_ln34_1_fu_147_p2;
wire   [0:0] and_ln10_fu_159_p2;
wire   [0:0] and_ln10_1_fu_165_p2;
wire   [0:0] or_ln10_1_fu_177_p2;
wire   [0:0] and_ln2_fu_183_p2;
reg   [0:0] ap_phi_mux_empty_5_phi_fu_123_p6;
wire    ap_CS_fsm_state2;
wire   [0:0] and_ln26_fu_222_p2;
wire   [0:0] or_ln26_fu_135_p0;
wire   [0:0] or_ln26_fu_135_p1;
wire   [0:0] or_ln34_fu_141_p0;
wire   [0:0] or_ln34_fu_141_p1;
wire   [0:0] or_ln34_fu_141_p2;
wire   [0:0] xor_ln10_fu_153_p0;
wire   [0:0] and_ln10_fu_159_p0;
wire   [0:0] xor_ln10_fu_153_p2;
wire   [0:0] and_ln10_1_fu_165_p0;
wire   [0:0] and_ln10_1_fu_165_p1;
wire   [0:0] or_ln10_fu_171_p2;
wire   [0:0] or_ln10_1_fu_177_p1;
wire   [0:0] and_ln2_fu_183_p0;
wire   [0:0] and_ln2_fu_183_p1;
wire   [0:0] and_ln18_fu_189_p0;
wire   [0:0] and_ln18_fu_189_p1;
wire   [0:0] and_ln18_1_fu_195_p0;
wire   [0:0] and_ln18_1_fu_195_p1;
wire   [0:0] and_ln18_1_fu_195_p2;
wire   [0:0] and_ln18_fu_189_p2;
wire   [0:0] xor_ln18_fu_201_p2;
wire   [0:0] xor_ln26_1_fu_218_p0;
wire   [0:0] xor_ln26_1_fu_218_p1;
wire   [0:0] xor_ln26_1_fu_218_p2;
wire   [0:0] xor_ln26_fu_213_p2;
reg   [1:0] ap_NS_fsm;
wire    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 2'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (((1'd0 == and_ln2_fu_183_p2) & (or_ln34_1_fu_147_p2 == 1'd1) & (1'd1 == and_ln10_1_fu_165_p2) & (1'd1 == and_ln10_fu_159_p2)) | ((or_ln10_1_fu_177_p2 == 1'd1) & (1'd0 == and_ln2_fu_183_p2) & (1'd0 == and_ln10_fu_159_p2) & (or_ln34_1_fu_147_p2 == 1'd1))))) begin
        empty_reg_100 <= 1'd0;
    end else if ((((or_ln34_1_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state1) & (((or_ln10_1_fu_177_p2 == 1'd1) & (1'd0 == and_ln10_fu_159_p2) & (or_ln34_1_fu_147_p2 == 1'd1) & (1'd1 == and_ln2_fu_183_p2)) | ((or_ln34_1_fu_147_p2 == 1'd1) & (1'd1 == and_ln2_fu_183_p2) & (1'd1 == and_ln10_1_fu_165_p2) & (1'd1 == and_ln10_fu_159_p2)))) | ((1'b1 == ap_CS_fsm_state1) & (((or_ln10_1_fu_177_p2 == 1'd0) & (1'd0 == and_ln10_fu_159_p2) & (or_ln34_1_fu_147_p2 == 1'd1)) | ((1'd0 == and_ln10_1_fu_165_p2) & (or_ln34_1_fu_147_p2 == 1'd1) & (1'd1 == and_ln10_fu_159_p2)))))) begin
        empty_reg_100 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        or_ln18_reg_258 <= or_ln18_fu_207_p2;
        or_ln26_reg_238 <= or_ln26_fu_135_p2;
    end
end

always @ (*) begin
    if (((1'd1 == and_ln26_fu_222_p2) & (or_ln18_reg_258 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        Regula = 32'd4;
    end else if (((or_ln18_reg_258 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        Regula = 32'd3;
    end else if (((1'b1 == ap_CS_fsm_state1) & (((or_ln10_1_fu_177_p2 == 1'd1) & (1'd0 == and_ln10_fu_159_p2) & (or_ln34_1_fu_147_p2 == 1'd1) & (1'd1 == and_ln2_fu_183_p2)) | ((or_ln34_1_fu_147_p2 == 1'd1) & (1'd1 == and_ln2_fu_183_p2) & (1'd1 == and_ln10_1_fu_165_p2) & (1'd1 == and_ln10_fu_159_p2))))) begin
        Regula = 32'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) & (((or_ln10_1_fu_177_p2 == 1'd0) & (1'd0 == and_ln10_fu_159_p2) & (or_ln34_1_fu_147_p2 == 1'd1)) | ((1'd0 == and_ln10_1_fu_165_p2) & (or_ln34_1_fu_147_p2 == 1'd1) & (1'd1 == and_ln10_fu_159_p2))))) begin
        Regula = 32'd2;
    end else if (((or_ln34_1_fu_147_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        Regula = 32'd5;
    end else begin
        Regula = 'bx;
    end
end

assign ap_ST_fsm_state1_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if (((1'd0 == and_ln26_fu_222_p2) & (or_ln18_reg_258 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_phi_mux_empty_5_phi_fu_123_p6 = 1'd0;
    end else if ((((1'd1 == and_ln26_fu_222_p2) & (or_ln18_reg_258 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((or_ln18_reg_258 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        ap_phi_mux_empty_5_phi_fu_123_p6 = 1'd1;
    end else begin
        ap_phi_mux_empty_5_phi_fu_123_p6 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign EW = empty_reg_100;

assign NS = ap_phi_mux_empty_5_phi_fu_123_p6;

assign and_ln10_1_fu_165_p0 = S;

assign and_ln10_1_fu_165_p1 = J;

assign and_ln10_1_fu_165_p2 = (and_ln10_1_fu_165_p1 & and_ln10_1_fu_165_p0);

assign and_ln10_fu_159_p0 = D;

assign and_ln10_fu_159_p2 = (xor_ln10_fu_153_p2 & and_ln10_fu_159_p0);

assign and_ln18_1_fu_195_p0 = S;

assign and_ln18_1_fu_195_p1 = J;

assign and_ln18_1_fu_195_p2 = (and_ln18_1_fu_195_p1 & and_ln18_1_fu_195_p0);

assign and_ln18_fu_189_p0 = Stg;

assign and_ln18_fu_189_p1 = D;

assign and_ln18_fu_189_p2 = (and_ln18_fu_189_p1 & and_ln18_fu_189_p0);

assign and_ln26_fu_222_p2 = (xor_ln26_fu_213_p2 & xor_ln26_1_fu_218_p2);

assign and_ln2_fu_183_p0 = D;

assign and_ln2_fu_183_p1 = Stg;

assign and_ln2_fu_183_p2 = (and_ln2_fu_183_p1 & and_ln2_fu_183_p0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign or_ln10_1_fu_177_p1 = D;

assign or_ln10_1_fu_177_p2 = (or_ln10_fu_171_p2 | or_ln10_1_fu_177_p1);

assign or_ln10_fu_171_p2 = (xor_ln10_fu_153_p2 | and_ln10_1_fu_165_p2);

assign or_ln18_fu_207_p2 = (xor_ln18_fu_201_p2 | and_ln18_fu_189_p2);

assign or_ln26_fu_135_p0 = Stg;

assign or_ln26_fu_135_p1 = D;

assign or_ln26_fu_135_p2 = (or_ln26_fu_135_p1 | or_ln26_fu_135_p0);

assign or_ln34_1_fu_147_p2 = (or_ln34_fu_141_p2 | or_ln26_fu_135_p2);

assign or_ln34_fu_141_p0 = S;

assign or_ln34_fu_141_p1 = J;

assign or_ln34_fu_141_p2 = (or_ln34_fu_141_p1 | or_ln34_fu_141_p0);

assign xor_ln10_fu_153_p0 = Stg;

assign xor_ln10_fu_153_p2 = (xor_ln10_fu_153_p0 ^ 1'd1);

assign xor_ln18_fu_201_p2 = (1'd1 ^ and_ln18_1_fu_195_p2);

assign xor_ln26_1_fu_218_p0 = J;

assign xor_ln26_1_fu_218_p1 = S;

assign xor_ln26_1_fu_218_p2 = (xor_ln26_1_fu_218_p1 ^ xor_ln26_1_fu_218_p0);

assign xor_ln26_fu_213_p2 = (or_ln26_reg_238 ^ 1'd1);

endmodule //intersection

-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity intersection is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    Stg : IN STD_LOGIC;
    D : IN STD_LOGIC;
    S : IN STD_LOGIC;
    J : IN STD_LOGIC;
    Regula : OUT STD_LOGIC_VECTOR (31 downto 0);
    EW : OUT STD_LOGIC;
    NS : OUT STD_LOGIC );
end;


architecture behav of intersection is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "intersection_intersection,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a100t-csg324-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.588000,HLS_SYN_LAT=1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=5,HLS_SYN_LUT=83,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal or_ln26_fu_135_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln26_reg_238 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln18_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln18_reg_258 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_reg_100 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_1_fu_147_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_fu_159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln10_1_fu_177_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln2_fu_183_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_empty_5_phi_fu_123_p6 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal and_ln26_fu_222_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln26_fu_135_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln26_fu_135_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_141_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_141_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln34_fu_141_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln10_fu_153_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_fu_159_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln10_fu_153_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_fu_165_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln10_1_fu_165_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln10_fu_171_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln10_1_fu_177_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln2_fu_183_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln2_fu_183_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_fu_189_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_fu_189_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_1_fu_195_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_1_fu_195_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_1_fu_195_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln18_fu_189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln18_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln26_1_fu_218_p0 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln26_1_fu_218_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln26_1_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln26_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    empty_reg_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (((ap_const_lv1_0 = and_ln2_fu_183_p2) and (or_ln34_1_fu_147_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln10_1_fu_165_p2) and (ap_const_lv1_1 = and_ln10_fu_159_p2)) or ((or_ln10_1_fu_177_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln2_fu_183_p2) and (ap_const_lv1_0 = and_ln10_fu_159_p2) and (or_ln34_1_fu_147_p2 = ap_const_lv1_1))))) then 
                empty_reg_100 <= ap_const_lv1_0;
            elsif ((((or_ln34_1_fu_147_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (((or_ln10_1_fu_177_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln10_fu_159_p2) and (or_ln34_1_fu_147_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln2_fu_183_p2)) or ((or_ln34_1_fu_147_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln2_fu_183_p2) and (ap_const_lv1_1 = and_ln10_1_fu_165_p2) and (ap_const_lv1_1 = and_ln10_fu_159_p2)))) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (((or_ln10_1_fu_177_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln10_fu_159_p2) and (or_ln34_1_fu_147_p2 = ap_const_lv1_1)) or ((ap_const_lv1_0 = and_ln10_1_fu_165_p2) and (or_ln34_1_fu_147_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln10_fu_159_p2)))))) then 
                empty_reg_100 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                or_ln18_reg_258 <= or_ln18_fu_207_p2;
                or_ln26_reg_238 <= or_ln26_fu_135_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    EW <= empty_reg_100(0);
    NS <= ap_phi_mux_empty_5_phi_fu_123_p6(0);

    Regula_assign_proc : process(ap_CS_fsm_state1, or_ln18_reg_258, or_ln34_1_fu_147_p2, and_ln10_fu_159_p2, and_ln10_1_fu_165_p2, or_ln10_1_fu_177_p2, and_ln2_fu_183_p2, ap_CS_fsm_state2, and_ln26_fu_222_p2)
    begin
        if (((ap_const_lv1_1 = and_ln26_fu_222_p2) and (or_ln18_reg_258 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            Regula <= ap_const_lv32_4;
        elsif (((or_ln18_reg_258 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            Regula <= ap_const_lv32_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (((or_ln10_1_fu_177_p2 = ap_const_lv1_1) and (ap_const_lv1_0 = and_ln10_fu_159_p2) and (or_ln34_1_fu_147_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln2_fu_183_p2)) or ((or_ln34_1_fu_147_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln2_fu_183_p2) and (ap_const_lv1_1 = and_ln10_1_fu_165_p2) and (ap_const_lv1_1 = and_ln10_fu_159_p2))))) then 
            Regula <= ap_const_lv32_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (((or_ln10_1_fu_177_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln10_fu_159_p2) and (or_ln34_1_fu_147_p2 = ap_const_lv1_1)) or ((ap_const_lv1_0 = and_ln10_1_fu_165_p2) and (or_ln34_1_fu_147_p2 = ap_const_lv1_1) and (ap_const_lv1_1 = and_ln10_fu_159_p2))))) then 
            Regula <= ap_const_lv32_2;
        elsif (((or_ln34_1_fu_147_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            Regula <= ap_const_lv32_5;
        else 
            Regula <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    and_ln10_1_fu_165_p0 <= (0=>S, others=>'-');
    and_ln10_1_fu_165_p1 <= (0=>J, others=>'-');
    and_ln10_1_fu_165_p2 <= (and_ln10_1_fu_165_p1 and and_ln10_1_fu_165_p0);
    and_ln10_fu_159_p0 <= (0=>D, others=>'-');
    and_ln10_fu_159_p2 <= (xor_ln10_fu_153_p2 and and_ln10_fu_159_p0);
    and_ln18_1_fu_195_p0 <= (0=>S, others=>'-');
    and_ln18_1_fu_195_p1 <= (0=>J, others=>'-');
    and_ln18_1_fu_195_p2 <= (and_ln18_1_fu_195_p1 and and_ln18_1_fu_195_p0);
    and_ln18_fu_189_p0 <= (0=>Stg, others=>'-');
    and_ln18_fu_189_p1 <= (0=>D, others=>'-');
    and_ln18_fu_189_p2 <= (and_ln18_fu_189_p1 and and_ln18_fu_189_p0);
    and_ln26_fu_222_p2 <= (xor_ln26_fu_213_p2 and xor_ln26_1_fu_218_p2);
    and_ln2_fu_183_p0 <= (0=>D, others=>'-');
    and_ln2_fu_183_p1 <= (0=>Stg, others=>'-');
    and_ln2_fu_183_p2 <= (and_ln2_fu_183_p1 and and_ln2_fu_183_p0);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_ST_fsm_state1_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_phi_mux_empty_5_phi_fu_123_p6_assign_proc : process(or_ln18_reg_258, ap_CS_fsm_state2, and_ln26_fu_222_p2)
    begin
        if (((ap_const_lv1_0 = and_ln26_fu_222_p2) and (or_ln18_reg_258 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_phi_mux_empty_5_phi_fu_123_p6 <= ap_const_lv1_0;
        elsif ((((ap_const_lv1_1 = and_ln26_fu_222_p2) and (or_ln18_reg_258 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((or_ln18_reg_258 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            ap_phi_mux_empty_5_phi_fu_123_p6 <= ap_const_lv1_1;
        else 
            ap_phi_mux_empty_5_phi_fu_123_p6 <= "X";
        end if; 
    end process;

    or_ln10_1_fu_177_p1 <= (0=>D, others=>'-');
    or_ln10_1_fu_177_p2 <= (or_ln10_fu_171_p2 or or_ln10_1_fu_177_p1);
    or_ln10_fu_171_p2 <= (xor_ln10_fu_153_p2 or and_ln10_1_fu_165_p2);
    or_ln18_fu_207_p2 <= (xor_ln18_fu_201_p2 or and_ln18_fu_189_p2);
    or_ln26_fu_135_p0 <= (0=>Stg, others=>'-');
    or_ln26_fu_135_p1 <= (0=>D, others=>'-');
    or_ln26_fu_135_p2 <= (or_ln26_fu_135_p1 or or_ln26_fu_135_p0);
    or_ln34_1_fu_147_p2 <= (or_ln34_fu_141_p2 or or_ln26_fu_135_p2);
    or_ln34_fu_141_p0 <= (0=>S, others=>'-');
    or_ln34_fu_141_p1 <= (0=>J, others=>'-');
    or_ln34_fu_141_p2 <= (or_ln34_fu_141_p1 or or_ln34_fu_141_p0);
    xor_ln10_fu_153_p0 <= (0=>Stg, others=>'-');
    xor_ln10_fu_153_p2 <= (xor_ln10_fu_153_p0 xor ap_const_lv1_1);
    xor_ln18_fu_201_p2 <= (ap_const_lv1_1 xor and_ln18_1_fu_195_p2);
    xor_ln26_1_fu_218_p0 <= (0=>J, others=>'-');
    xor_ln26_1_fu_218_p1 <= (0=>S, others=>'-');
    xor_ln26_1_fu_218_p2 <= (xor_ln26_1_fu_218_p1 xor xor_ln26_1_fu_218_p0);
    xor_ln26_fu_213_p2 <= (or_ln26_reg_238 xor ap_const_lv1_1);
end behav;
